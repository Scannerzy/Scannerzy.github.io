{"meta":{"title":"Scannerzy","subtitle":null,"description":"�ϼҵ�С�ƾƹ�","author":"Scannerzy","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Mybatis框架总结","slug":"Mybatis框架总结","date":"2019-07-29T06:25:55.000Z","updated":"2019-07-29T06:25:55.791Z","comments":true,"path":"2019/07/29/Mybatis框架总结/","link":"","permalink":"http://yoursite.com/2019/07/29/Mybatis框架总结/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Spring框架总结","slug":"Spring框架总结","date":"2019-07-29T06:25:30.000Z","updated":"2019-07-29T06:25:30.441Z","comments":true,"path":"2019/07/29/Spring框架总结/","link":"","permalink":"http://yoursite.com/2019/07/29/Spring框架总结/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SpringMVC框架总结","slug":"SpringMVC框架总结","date":"2019-07-29T06:25:01.000Z","updated":"2019-07-29T09:14:49.195Z","comments":true,"path":"2019/07/29/SpringMVC框架总结/","link":"","permalink":"http://yoursite.com/2019/07/29/SpringMVC框架总结/","excerpt":"","text":"SpringMVC框架总结​ Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等。 1. Spring入门1.1 SpringMVC处理流程 1.2 入门程序​ 使用浏览器显示商品列表 1.2.1 创建web工程​ SpringMVC是表现层框架，需要搭建web工程开发。创建时版本可选择2.5（可以自动生成web.xml 文件） 1.2.2 导入jar包 1.2.3 加入配置文件​ 创建config资源文件夹，放置配置文件 1.2.3.1 创建springmvc.xml创建SpringMVC的核心配置文件 ​ SpringMVC本身就是Spring的子项目，对Spring兼容性很好，不需要做很多配置。这里只配置一个Controller扫描就可以了，让Spring对页面控制层Controller进行管理 创建springmvc.xml 12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"&gt; &lt;!-- 配置controller扫描包 --&gt; &lt;context:component-scan base-package=\"com.zy\" /&gt;&lt;/beans&gt; 创建包 com.springmvc.controller 下边用于储存controller 1.2.3.2 配置前端控制器配置SpringMVC的前端控制器DispatcherServlet 在web.xml 123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\"&gt; &lt;display-name&gt;springmvc-first&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 配置SpringMVC前端控制器 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc-1&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 指定SpringMVC配置文件 --&gt; &lt;!-- SpringMVC的配置文件的默认路径是/WEB-INF/$&#123;servlet-name&#125;-servlet.xml --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc-1&lt;/servlet-name&gt; &lt;!-- 设置所有以action结尾的请求进入SpringMVC --&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 1.2.4 加入jsp页面 jsp 页面： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;查询商品列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"$&#123;pageContext.request.contextPath &#125;/item/queryitem.action\" method=\"post\"&gt;查询条件：&lt;table width=\"100%\" border=1&gt;&lt;tr&gt;&lt;td&gt;&lt;input type=\"submit\" value=\"查询\"/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;商品列表：&lt;table width=\"100%\" border=1&gt;&lt;tr&gt; &lt;td&gt;商品名称&lt;/td&gt; &lt;td&gt;商品价格&lt;/td&gt; &lt;td&gt;生产日期&lt;/td&gt; &lt;td&gt;商品描述&lt;/td&gt; &lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;&lt;c:forEach items=\"$&#123;itemList &#125;\" var=\"item\"&gt;&lt;tr&gt; &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt; &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt; &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/itemEdit.action?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/c:forEach&gt;&lt;/table&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 1.3.5 实现显示商品列表1.3.5.1 创建pojo//需要传入的数据 12345678&lt;/tr&gt;&lt;c:forEach items=\"$&#123;itemList &#125;\" var=\"item\"&gt;&lt;tr&gt; &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt; &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt; &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/itemEdit.action?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt; 根据jsp 表中的需求创建 pojo 123456789101112131415public class Item &#123; // 商品id private int id; // 商品名称 private String name; // 商品价格 private double price; // 商品创建时间 private Date createtime; // 商品描述 private String detail;创建带参数的构造器set/get。。。&#125; 1.3.5.2 创建ItemControllerItemController是一个普通的java类，不需要实现任何接口。 需要在类上添加@Controller注解，把Controller交由Spring管理 在方法上面添加@RequestMapping注解，里面指定请求的url。其中“.action”可以加也可以不加。 123456789101112131415161718192021222324@Controllerpublic class ItemController &#123; //@RequestMapping :里边放的是请求的url,和用户请求的url进行匹配 // action可以写也可以不写 @RequestMapping(\"/itemList.action\") public ModelAndView queryItemList() &#123; //创建页面需要显示的数据 List&lt;Items&gt; list = new ArrayList&lt;Items&gt;(); list.add(new Items(1, \"盖伦\", 3150, new Date(), \"坦克 1\")); list.add(new Items(2, \"盖伦\", 3150, new Date(), \"坦克 2\")); list.add(new Items(3, \"盖伦\", 3150, new Date(), \"坦克 3\")); list.add(new Items(4, \"盖伦\", 3150, new Date(), \"坦克 4\")); list.add(new Items(5, \"盖伦\", 3150, new Date(), \"坦克 5\")); list.add(new Items(6, \"盖伦\", 3150, new Date(), \"坦克 6\")); // 创建ModelAndView，用来存放数据和视图 ModelAndView modelAndView = new ModelAndView(); // 设置数据到模型中 modelAndView.addObject(\"itemList\",list); // 设置视图jsp，需要设置视图的物理地址 modelAndView.setViewName(\"/WEB-INF/jsp/itemList.jsp\"); return modelAndView; &#125;&#125; 1.3.6 启动项目测试启动项目，浏览器访问地址 http://localhost:8080/springmvc-1/itemList.action","categories":[],"tags":[]},{"title":"de","slug":"de","date":"2019-07-29T06:20:42.000Z","updated":"2019-07-29T06:21:36.178Z","comments":true,"path":"2019/07/29/de/","link":"","permalink":"http://yoursite.com/2019/07/29/de/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"让你看看我今天搭的博客","date":"2019-07-22T07:41:54.402Z","updated":"2019-07-22T07:43:00.359Z","comments":true,"path":"2019/07/22/让你看看我今天搭的博客/","link":"","permalink":"http://yoursite.com/2019/07/22/让你看看我今天搭的博客/","excerpt":"","text":"让你看看我今天搭的博客ohh 嗯，就这么多咦 ，就是会说 “嗯” 啊","categories":[],"tags":[]}]}